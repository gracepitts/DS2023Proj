# Data Cleaning
```{python}
# import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import scipy as sp
```

We began by loading in the catapult data from both seasons and merging the two so that we can analyze trends and patterns across both seasons together, rather than analyzing them separate. It is important to note that this is simulated data, due to privacy reasons preventing us from using players actual data. The simulated data is still highly useful and allows us to draw meaningful conclusions.

```{python}
# load data
c1 = pd.read_csv('catapult season 1.csv')
c2 = pd.read_csv('catapult season 2.csv')
# merge the two seasons using concat ignoring their individual indexes
df = pd.concat([c1, c2], ignore_index=True)
```

We dropped duplicates to remove any repeated entries which may skew the analysis. Duplicate rows sometimes occur due to data entry errors, or merging issues, which may occur in our dataset since we merged the two. By dropping duplicates, we know that each data entry is unique.

```{python}
#check for duplicates
duplicates = df.duplicated()
print(f"Number of duplicates: {duplicates.sum()}")
#drop duplicates
df = df.drop_duplicates()

```

We decided to only keep these key features because they represent the metrics we believed would be most relevant to our analysis and produce the most interesting findings. These variables provide meaningful insights into player workload, intensity, and performance. We believe that focusing on these metrics will help us tell the most accurate and compelling story about athlete training and recovery and allow us to draw clearer conclusions.

```{python}
#list of key variables that will be used
key_vars = [
    'Total Player Load', 'Player Load Per Minute', 'Explosive Efforts', 'Session Total Jump', 'Session Jumps Per Minute', 'Total IMA', 'IMA/Min', 'Position', 'Date'
]
#setting dataframe to only include key variables
df = df[key_vars]

# converting date feature to datetime format so it can be used as time
df['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%y', errors='coerce')
# Creating a month column based on the date column
df['Month'] = df['Date'].dt.to_period('M').dt.to_timestamp()
df.info()
```

We created a new column for months to allow us to analyze trends over time without having to get overwhelming amounts of data by day.